# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


conditional jobs and steps:
	- control step or job execution with if and dynamic expressions
	- chnage results behaviour with:
		- failure()
		- success()
		- cancelled()
		- always()
	- use continue-on-error to ignore step failure

matrix jobs: 
	- Run multiple jobs configuration in parallel
	- add or remove specific combinations.
	- control whether a single failing job should cancel all other matrix jobs via continue-on-error
	
resuable workflows: 
	- workflow can be reused via the workflow_call event
	- reuse any logic (as many jobs and steps as needed)
	- work with input output and secrets as required
	
	ajaypparmar311
	hpHN6a17ybaZ4JeA
	

Storing Actions In Repositories & Sharing Actions With Others
In this module, we created custom Actions that were stored in the same repository as our Workflow(s).

Alternatively, we could've stored the custom Actions in separate repositories (which therefore then only include the Action definition + code).

This is actually quite straightforward:

Create a new, local project folder which contains your action.yml file + all the code belonging to the action (Important: Don't put your action.yml file or code in a .github/actions folder or anything like that - just keep it directly on the root level of your created project!)

Add a local Git repository to your created project (via git init)

Create your commit(s) via git add and git commit

Create a GitHub repository and connect it to your local Git repository (via git remote add)

Add a tag via git tag -a -m "My action release" v1

Push your local code to the remote GitHub repository (via git push --follow tags)

Use your custom Action in any other Workflow (in any other project and repository) by referencing the repository which contains your action (e.g., my-account/my-action@v1)

If your custom Action is stored in a public repository, it can also be published to the GitHub Actions Marketplace as described here: https://docs.github.com/en/actions/creating-actions/publishing-actions-in-github-marketplace#publishing-an-action



github openID connect 


More On GitHub Actions Security
In addition to the concepts covered in this module, you should absolutely also explore the security guides by GitHub itself:

General overview & important concepts: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions

More on Secrets: https://docs.github.com/en/actions/security-guides/encrypted-secrets

Using GITHUB_TOKEN: https://docs.github.com/en/actions/security-guides/automatic-token-authentication

Advanced - Preventing Fork Pull Requests Attacks: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/

Security Hardening with OpenID Connect: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect



SLACK NOTIFICATION WEBHOOK : https://hooks.slack.com/services/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